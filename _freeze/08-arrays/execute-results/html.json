{
  "hash": "3d3be773bb06bad4e9017f0302781499",
  "result": {
    "markdown": "# Array Formulas {#sec-arrays}\n\n::: {.callout-note appearance=\"simple\" icon=\"false\"}\n+ Introduction of matrices.\n+ Creating array formulas.\n+ Create frequency distribution of data with function iNTERVAL.\n+ Dynamic matrices and associated functions.\n+ Mathematical matrix functions.\n:::\n\nAn array formula is a formula that can perform multiple calculations on one or more items in an array. Array formulas were known to be very tricky because they look different from normal formulas and you had to enter these formulas in a different way: with CTRL-SHIFT-ENTER instead of just ENTER. That is no longer the case in Excel 365.\n\n::: {.callout-warning}\n1. In Excel 365, working with array formulas and their behavior has changed compared to the other Excel versions. Existing formulas that can produce multiple results also behave like array formulas in Excel 365. Some new dynamic array formulas have also been added.\n\n2. A number of new dynamic array formulas have been added to Excel 365.\n\n**By this, the contents of this chapter is largely exclusive to Excel 365.**\n:::\n\n## What is an Array Formula {#sec-arrays-over}\n\nA **vector** is a list of numbers that are either in a row or in a column. You then have a **row vector** or a **column vector** respectively. Excel does not use the term vector, but **array**.\n\nAn array in Excel can be:\n\n-  A row of values (actually a row vector). This is a 1-dimensional horizontal matrix.\n-  A column of values (actually a column vector). This is a 1-dimensional vertical matrix.\n-  A rectangle of rows and columns of values, so an area. This is a 2 dimensional matrix.\n\n@fig-array-examples shows an example of each.\n\n![Matrix examples, with from left to right: row vector, column vector, 2-dim. array.](images/arrays/array-examples.png){#fig-array-examples}\n\nYou can create a matrix with constant values as showed in the three examples, by starting in a cell with the `=` symbol and then placing a row of values between curly brackets `{}`. The values must be separated from each other by a special symbol. Which symbols to use as separator symbol depends on the language and regional settings on the computer.\n\n+ English language systems\n  -   Comma `,` for a new column.\n  -   Semicolon `;` for a new row.\n+ Dutch language systems\n  -   Backslash `` for a new column.\n  -   Semicolon `;` for a new row.\n\nFurthermore, with a 2-dimensional array, you have to take into account:\n\n+ List in order of rows.\n+ All rows must have the same number of columns.\n\nSome examples.\n\n::: {#exm-arrays-rowvector}\n**Row vector**\n\n`={1,2,3,4,5}` returns 1 row with 5 columns.\n\n![1-dimensional horizontal array.](images/arrays/array-1dim-h.png){#fig-array-1dim-h}\n\n:::\n\n::: {#exm-arrays-columnvector}\n**Column vector**\n\n`={1;3;6}` returns 3 rows with 1 column.\n\n![1-dimensional vertical array.](images/arrays/array-1dim-v.png){#fig-array-1dim-v}\n\n:::\n\n::: {#exm-arrays-2dimarray}\n**2-dimensional array**\n\n`={1,2,3,4,5;3,5,7,9,11;6,9,12,15,18}` returns 3 rows with 5 columns.\n\n![2-dimensional array.](images/arrays/array-2dim.png){#fig-array-2dim}\n\n:::\n\n::: {.callout-warning}\nFor all examples, only the first cell is editable. That is the cell where you entered the array. When you select another cell in the values area, the content in the formula bar is gray, and you cannot change the value.\n:::\n\n## Simple Array Formulas {#sec-arrays-simple}\n\nAn array formula is a formula that you use to perform calculations on matrices. The result is an array. To use array formulas, you need to consider in advance how many outcomes there are and how these outcomes are arranged (one cell, row, column, table).\n\nIn @fig-example-numbers, you can see that the sum and product of two numbers are calculated a few times. This can be done with simple formulas. For example, the formula in D2 could be `=A2+B2`. And the formula in E2 could be `=A2*B2`. When copying these formulas down the correct formulas are also in D3:E4.\n\n![Sum and product of two numbers via normal Excel formulas.](images/arrays/example-numbers.png){#fig-example-numbers}\n\nThis calculation can also be done with array formulas. It is good practice to learn the behavior of an array formula.\n\n::: {#prp-arrays-simple}\n[File]{.smallcaps}: `Array1.xlsx`\n\n1. Open the file.\n\n2. Select cell D2 and enter `=A2:A4+B2:B4` and then press [ENTER]{.uicontrol}.  \n   The results are in cells D2: D4, and the box around the result shows that it is an array.\n\n![Sum of two columns through an array formula.](images/arrays/example-column-sum.png){#fig-example-column-sum}\n\n::: {.callout-note}\n+ More convenient than typing the cell addresses is selecting them with the mouse.\n\n+ Because the result of the addition consists of a column of three numbers, Excel will automatically flow the result to cells D3:D4. You have to think about this in advance and make sure that these cells are empty, otherwise the error message `#SPILL!` will follow.\n:::\n\n3. Select cell E2 and enter `=A2:A4*B2:B4` and then press [ENTER]{.uicontrol}.  \n   The results are in cells E2:E4, and the box around the result shows that it is an array.\n\n![Product of two columns through an array formula.](images/arrays/example-column-product.png){#fig-example-column-product}\n\n:::\n\n\n::: {#prp-arrays-multiplication1}\n**Multiplication of a row vector with a constant**\n\n@fig-example-dim1 shows how a row of three numbers is multiplied by the number 4. The result consists of a row of three numbers. Make this example yourself. \n\n![Multiplication of a row vector with a constant.](images/arrays/example-dim1.png){#fig-example-dim1}\n\n\n<div class='webex-solution'><button>Hint</button>\n\nFormula in G1: `=A1:C1*E1`\n\n</div>\n\n\n:::\n\n::: {#prp-arrays-multiplication2}\n**Multiplication 2-dimensional array with a column vector**\n\n@fig-example-dim2 shows how a 4x3 array is multiplied by a column of numbers. The result is again a 4x3 array.\n\nMake this example yourself. You can use the practicefile [Array2.xlsx` for this. \n\n![Multiplication 2-dimensional array with a column vector.](images/arrays/example-dim2.png){#fig-example-dim2}\n\n\n<div class='webex-solution'><button>Hint</button>\n\nFormule in G1 wordt `A1:C4*E1:E4`\n\n</div>\n\n\n:::\n\n## Calculating one result {#sec-arrays-single}\n\nThis section explains how to use a single array formula in situations that would otherwise require multiple formulas. \n\nYou can use an array formula if you need to perform various calculations to get one result. This type of array formula can simplify a worksheet because multiple formulas are replaced by only one array formula.\n\nFigure figuur @fig-example-shares shows a stock portfolio with prices. In order to calculate the total value of the shares at a given price you normally calculate the value for each share and then add these values. With an array formula, this calculation can be done without calculating the intermediate results.\n\n![Prices of shares.](images/arrays/example-shares.png){#fig-example-shares}\n\n::: {#prp-arrays-single}\n[File]{.smallcaps}: `Array3.xlsx`\n\n1.  Open the file.\n\n2.  Select cell C6 and enter formula `=SUM(B2:B5*C2:C5)`.\n\n4.  Repeat this action for cell D6, the entered formula is `=SUM(B2:B5*D2:D5)`.\n\n**Question**\n\nYou can also make the formula in C6 suitable for copying to D6. What do you have to change in the formula for that?\n\n\n<div class='webex-solution'><button>Answer</button>\n\nBy making the first column in the formula in C6 absolute, so `=SUM($B$2:$B$5*C2:C5)`.\n\n</div>\n\n\n:::\n\n::: {#prp-arrays-weighted-average1}\n[File]{.smallcaps}: `Array4.xlsx`\n\nIn this exercise, the weighted average of four tests must be calculated for each student using a matrix formula. Start with a formula for Jan and make this formula suitable for copying down.\n\n![Weighted averages of marks obtained for four tests.](images/arrays/example-marks.png){#fig-example-marks}\n\n\n<div class='webex-solution'><button>Hint</button>\n\n1. You get a weighted average for Jan by multiplying each test grade of Jan by the weighting factor for that test and then dividing the sum of these four results by the sum of the four test factors. \n\n2. To make the formula suitable for copying, you have to think about which cell addresses should not be changed during copying. You have to make those cell addresses absolutely. \n\n</div>\n\n\n\n<div class='webex-solution'><button>Solution</button>\n\nFormula F3: `=SUM(B3:E3*$B$1:$E$1)/SOM($B$1:$E$1)`\n\nThen copy formula to F4 and F5.\n\n</div>\n\n\n:::\n\n::: {#prp-arrays-weighted-average2}\n[File]{.smallcaps}: `Array5.xlsx`\n\n@fig-example-studentlength)shows the gender and height (cm) of a number of students. The average height for male and female students is calculated in the cells C11 and C12,.\n\n![Average height by gender.](images/arrays/example-studentlength.png){#fig-example-studentlength}\n\nThe array formula is a bit trickier here because you only need to select the lengths for either male or female. This is possible with the `IF` function.\n\n1. Open the file.\n\n2. Select cell C11 and enter formula `=AVERAGE(IF(B2:B9=\"m\",C2:C9))`.\n\n3. Now create a formula for cell C12 by adjusting the formula for the female students.\n\n\n<div class='webex-solution'><button>Solution</button>\n\nFormula C12: `=AVERAGE(IF(B2:B9=\"f\",C2:C9))`.\n\n</div>\n\n\n:::\n \n## Frequency distribution {#sec-arrays-frequency}\n\nWith function `FREQUENCY` you can create a frequency distribution.\n\nSyntax: `FREQUENCY(data_array,bins_array)`.\n\nThe first argument is an array with the values. The second argument is an array with the intervals into which you want to group the values. The result is an array with the frequencies.\n\n::: {#prp-arrays-frequency}\n[File]{.smallcaps}: `Array6.xlsx`\n\n![Frequency distribution.](images/arrays/array-frequency.png){#fig-array-frequency}\n\n1. Open the file.\n\n2. Enter in C2 the formula `=FREQUENCY(A2:A11,B2:B5)`.\n\n::: {.callout-note}\nThe result is a frequency table. In the explanation in the figure, you can read how the boundaries of the interval are dealt with.\n\n![](images/arrays/array-frequency-explanation.png)\n:::\n\n:::\n\n## Dynamic array formulas {#sec-arrays-dynamic}\n\nAn array formula entered in one cell on the worksheet can give results in multiple cells on the worksheet. This behavior is called **spilling**, and the results appear in a **spill range**. Which cells and how many depends on the result of the formula. If the source content of the formula changes, the results are dynamically updated, and the spill range may grow or shrink. You get an `#SPILL! Error` when the spilling is blocked by other data in the cells.\n\nTo create a reference to a spill range, put a hash symbol `#` after the address of the first cell of the spill range. For example, if the spill range is J2:N4, you refer to it with`=J2#`. When on a later moment, the size of the spill range changes, the result of the formula also changes.\n\n::: {.callout-note}\nWhen you are using arrays in formulas, it is very useful to provide them with a name. This can be done the same way you are assigning a name to a cell.\n:::\n\nTo support the behavior of dynamic arrays, a number of new functions have been released: `RANDARRAY`, `FILTER`, `SEQUENCE`, `SORT`, `SORTBY`, `UNIQUE`, `XMATCH` and `XLOOKUP`.\n\n### RANDARRAY {#sec-arrays-randarray}\n\nReturns an array with random numbers. All arguments are optional.\n\nSyntax\n\n`RANDARRAY([rows],[columns],[min],[max],[integer])`\n\n+ `rows`: the number of rows in the returned array (default=1)\n+ `columns`: the number of columns in the returned array (default=1)\n+ `min`: the minimum number you would like returned (default=0)\n+ `max`: the maximum number you would like returned (default=1)\n+ `integer`: TRUE for returning integers, FALSE for returning decimals (default = FALSE)\n\n::: {#exm-array-randarray}\n`=RANDARRAY(3,4,10,50,TRUE)`\n\n![Generates a 3x4 array with random integers between 10 and 50. ](images/arrays/array-dyn-randarray.png){#fig-array-dyn-randarray}\n\n:::\n\n### FILTER {#sec-arrays-filter}\n\nReturns the filtered values from an array/range.\n\n**Syntax**\n\n`FILTER(array,include,[if_empty])`\n\n+ `array`: the range or array to filter.\n+ `include`: an array of booleans where TRUE represents a row or column to retain.\n+ `if_empty`: returned value if no items are retained.\n\n::: {#exm-array-filter}\n[File]{.smallcaps}: `Dynarray.xlsx`\n\nExtract the rows with gender female.\n\n![From a list of names, those rows for which the gender is female are taken.](images/arrays/array-dyn-filter.png){#fig-array-dyn-filter}\n\nReplace in the formula \"f\" with \"m\" or \"z\".\n\nYou can also add multiple criteria. To filter for women less than 170 change the formula in `=FILTER(A32:C41,(B32:B41=\"f\")*(C32:C41<170),\"None\")`\n:::\n\n### SEQUENCE {#sec-arrays-sequence}\n\nReturns a sequence of numbers according to a pattern.\n\n**Syntax**\n\n`SEQUENCE(rows,[columns],[start],[step])`\n\n+ `rows`: the number of rows to return.\n+ `columns`: the number of columns to return (default=1)\n+ `start`: the first number in the sequence (default=1)\n+ `step`: the amount to increment each subsequent value in the sequence (default=1)\n\n::: {#exm-array-sequence}\n`=SEQUENCE(4,3,5,10)`\n\n![Generates a 4x3 matrix of integers, starting with 5 and increasing by 10.](images/arrays/array-dyn-sequence.png){#fig-array-dyn-sequence}\n\n:::\n\n### SORT {#sec-arrays-sort}\n\nSorts the column values from a range/array.\n\n**Syntax**\n\n`SORT(array,[sort_index],[sort_order],[by_col])`\n\n+ `array`: the array to sort.\n+ `sort_index`: a number indicating the row or column to sort by (default=1)\n+ `sort_order`: 1= the sort order, 1=ascending, -1=descending (default=1)\n+ `by_col`: logical value for the sort direction,TRUE=sort columns, FALSE=sort rows (default=FALSE)\n\n::: {#exm-array-sort}\n[File]{.smallcaps}: `Dynarray.xlsx`\n\nSorting an array on the values in column 3.\n\n![An array is sorted by length (= column 3).](images/arrays/array-dyn-sort.png){#fig-array-dyn-sort}\n\n:::\n\n### SORTBY {#sec-arrays-sortby}\n\nSorts the values from a range/array based on other values. \n\n**Syntax**\n\n`SORTBY(array,by_array1,[sort_order], ...)`\n\n+ array: the array to sort.\n+ by_array1: the array to sort on\n+ sort_order: 1= the sort order, 1=ascending, -1=descending (default=1)\n\n::: {#exm-array-sortby}\n[File]{.smallcaps}: `Dynarray.xlsx`\n\nSort names based on length.\n\n`=SORTBY(A2:A11,C2:C11)`\n\n![Een lijst met namen wordt gesorteerd op lengte.](images/arrays/array-dyn-sortby1.png){#fig-array-dyn-sortby1}\n\nAs you can see, the series on which the sort is based does not have to appear in the output.\n:::\n\nAnother use of this function is when sorting by two columns.\n\n::: {#exm-array-sortby2}\n[File]{.smallcaps}: `Dynarray.xlsx`\n\nSort the array ascending by gender and then descending by length. \n\n`=SORTBY(A2:C11,B2:B11,1;C2:C11,-1)`\n\n![An array is sorted ascending by gender and then descending by length. ](images/arrays/array-dyn-sortby2.png){#fig-array-dyn-sortby2}\n\n:::\n\n### UNIQUE {#sec-arrays-unique}\n\nReturns an array with unique values from an array.\n\n**Syntax**\n\n`UNIQUE(array,[by_col],[exactly_once])`\n\n+ `array`: the array from which to return unique rows or columns.\n+ `by_col`: TRUE=return unique columns, FALSE= return unique rows (default=FALSE)\n+ `exactly_once`: TRUE=returns unique values that occur exactly once, FALSE=returns all distinct rows or columns (default = FALSE)\n\n::: {#exm-array-unique}\n`UNIQUE(A1:A10)`\n\nThe unique values are extracted from a series of names.\n\n![Uit een lijst met fruitnamen zijn de unieke waarden gehaald en in een nieuwe matrix geplaatst.](images/arrays/array-dyn-unique.png){#fig-array-dyn-unique}\n\n:::\n\n### XMATCH {#sec-arrays-xmatch}\n\nThe function performs a search and returns a position in vertical or horizontal ranges. It is a modern and more extensive successor of the function `MATCH`.\n\n`XMATCH` supports approximate and exact matches, reverse search, and wildcards (`*?`) for partial matches. The data lookup can start from the first value or from the last value (reverse search). In addition, binary searches can also be performed.\n\nThis function is usually used in conjunction with other functions. Much more useful is the XLOOKUP function.\n\n**Syntax**\n\n`XMATCH(lookup_value,lookup_array,[match_mode],[search_mode])`\n\n+ `lookup_value`: the value to search for\n+ `lookup_array`: the array to search\n+ `match_mode`: specify how to match, 0=exact match, -1=exact match or the next smaller item, 1=exact match or the next larger item, 2=wildcard match (default=0)\n+ `search_mode`: specify how to search, 1=start search from the first item, -1=from the last item, 2=binary ascending, -2=binary descending\n\n::: {#exm-array-xmatch}\n`=XMATCH(E1,A2:A11)`\n\nTop 10 of total medals on the Olympic Summer Games 2016.\n\n![The position of the country in cell E1 is determined.](images/arrays/array-dyn-xmatch.png){#fig-array-dyn-xmatch}\n\n:::\n\n### XLOOKUP {#sec-arrays-xlookup}\n\nThis function is a modern and more comprehensive replacement for older functions like `VLOOKUP`, `HLOOKUP` and `SEARCH`. This new function supports approximate and exact matches, wildcards (*?) for partial matches, and search capabilities in vertical and horizontal ranges.\n\n**Syntax**\n\n`XLOOKUP(lookup_value, lookup_array, return_array, [if_not_found], [match_mode], [search_mode])`\n\n+ `lookup_value`: the value to search for\n+ `lookup_array`: the array to search\n+ `return_array`: the array to return\n+ `if_not_found`: the value to return if no match is found\n+ `match_mode`: specify how to match, 0=exact match, -1=exact match or the next smaller item, 1=exact match or the next larger item, 2=wildcard match (default=0)\n+ `search_mode`: specify how to search, 1=start search from the first item (default), -1=from the last item, 2=binary ascending, -2=binary descending\n\n::: {#exm-array-xlookup}\n`=XLOOKUP(D2,A2:A7,B2:B7,,-1)`\n\nA discount table containing the discount percentages from a certain quantity.\n\n![Determination of the discount percentage for the purchase quantity in cell D2.](images/arrays/array-dyn-xlookup.png){#fig-array-dyn-xlookup}\n\n::: {.info data-latex=\"}\nPay close attention to the arguments in this formula.\n\n+ `lookup_value`: D2\n+ `lookup_array`: A2:A7\n+ `return_array`: B2:B7\n+ `if_not_found`: is not specified, hence a comma immediately follows.\n+ `match_mode`: -1\n+ `search_mode`: is not specified, the default value will be used.\n:::\n\n:::\n\n## Tables and array formulas {#sec-arrays-tables}\n\nIn most cases, array formulas are used to perform actions on a list of data, often in multiple columns. Then it has many advantages to turn that data list into a real Excel table. In the array formulas you can then use the table and column name for the references. And the references remain healthy when rows are added or removed.\n\nWhen referring to a column name in an Excel table, put the column name in square brackets immediately after the table name: table_name[column_name].\n\n::: {#prp-arrays-tables}\n[File:]{.term} `Personnel.xlsx`\n\n1. Open the file.\n\n2. Convert the data range to a table with [tab Insert > Table]{.uicontrol} and specify [tblPersonnel]{.varname} as the name of the table.\n\n3. Save the file with name [Personneltable.xlsx` so that the original file is not modified.\n\n4. In a cell outside the data area, e.g. in cell K4, enter the following formula `=UNIQUE(tblPersonnel[Department])`.\n\nYou will now get a list with the names of the departments. To make an alphabetically sorted list of these, you have to include this formula within the function SORT.\n\n5. Change the entered formula to `=SORT(UNIQUE(tblPersonnel[Department]))`.\n\nYou will now get a sorted list with the names of the departments.\n\nSimilarly, create a sorted list of division names.\n\n:::\n\n## Returning multiple values {#sec-arrays-xlookup-multiplevalues}\n\n`XLOOKUP` can return more than one value for the same match. In this task, four values are returned with one formula.\n\n::: {#prp-arrays-xlookup-multiplevalues}\n[File:]{.term} `olympic2016.xlsx`\n\n1. Open the file.\n\n2. Convert the data range to a table with [tab Insert > Table]{.uicontrol} and specify [Medals]{.varname} as table name.\n\n3. Add a [Total]{.varname} column to the table containing a formula for the total number of medals. This is done as follows:\n\n   + Enter the text `Total` in cell E1 and press ENTER. A new column is now automatically created.\n\n   + Select cell E2 and type `=SUM(]{.userinput}, then select the cells B2:D2, type [)` and press ENTER.\n\nThe values now appear in the [Total]{.varname} column. Note further that Excel has changed the formula in cell E2 in `=SOM(Medals[@[Gold]:[Bronze]])`.\n\n4. Copy the texts in A1:E1 to G1:K1.\n\n5. Enter the text `Netherlands` in cell G2.\n\n6. Select H2 and enter  \n   `=XLOOKUP(G2,Medals[Country],Medals[Gold]:Medals[Total])`.\n\nThe result will look like this:\n\n![The formula in H2 returns multiple values.](images/arrays/array-xlookup-multiplevalues.png){#fig-}\n\n:::\n\n## Two way search {#sec-arrays-xlookup-2way}\n\n`XLOOKUP` can also be used to search in two directions. This can be done by including (nesting) an `XLOOKUP` function within another `XLOOKUP` function.\n\n@fig-array-xlookup-2way shows a number of Starbucks coffee prices. In cell G3, the price must appear based on the search criteria in G1 and G2.\n\n![Nested XLOOKUP functions.](images/arrays/array-xlookup-2way.png){#fig-array-xlookup-2way}\n\n::: {#prp-arrays-xlookup-2way}\n[File:]{.terml} `Tidy001.xlsx`\n\n1. Open the file.\n\n2. Enter the data in F1:F3 and G1:G2.\n\n3. Enter in G3 the formula  \n   `=XLOOKUP(G2,B1:D1,XLOOKUP(G1,A2:A10,B2:D10))`.\n\n::: {.callout-note}\n+ The inner `XLOOKUP` looks up the coffee type in the product column and returns a row with the three prices.\n\n+ The outer `XLOOKUP` finds the correct size and returns the corresponding price.\n:::\n\n:::\n\n## Mathematical array functions {#sec-arrays-math}\n\nEspecially in [linear algebra](https://en.wikipedia.org/wiki/Linear_algebra), many arithmetic operations are performed with arrays. Excel offers support for this with a few specific functions. The use of these functions is beyond the scope of this textbook.\n\nMUNIT\n: Identity matrix.\n: Returns the identity matrix for the specified dimension. Mostly used in combination with other matrix functions, such as MMULT.\n\nMMULT\n: Matrix product.\n: Returns the matrix product of two arrays.\n\nMINVERSE\n: Inverse matrix.\n: Returns the inverse matrix. Generally used for solving systems of mathematical equations with several variables. The product of a matrix and its inverse is the identity matrix.\n\nMDETERM\n: Determinant.\n: Returns the determinant of a matrix. Generally used for solving systems of mathematical equations with several variables.\n\n## Exercises {#sec-arrays-exercises}\n\n::: {#exr-matr001}\n**Array addition (matr001)**\n\nEnter the following summation using array formulas.\n\n![](images/arrays/matr001-data.png)\n:::\n\n::: {#exr-matr002}\n**Failures per district (matr002)**\n\nThe public utility of a city keeps a list for recording per district the reported failures to gas, water, and electricity. You can see this list in the following figure. The management of the company would like an overview of the total number of failures per district as calculated under the resume. The easiest way to do this is by using array formulas.\n\n![](images/arrays/matr002-data.png)\n\n[File]{.smallcaps}: `Matr002.xlsx`\n\nEnter the array formulas in the cells C16, C17, C18 en C19 to calculate the total number of failures per district.\n\n\n<div class='webex-solution'><button>Hint</button>\n\n1.  The formula {(B2:B11)=B16} provides a matrix column of 10 rows. If the value in a cell from the range B2:B11 is equal to the value in cell B16 (= North) then the value in the array is TRUE (=1) otherwise FALSE (=0).\n\n![](images/arrays/matr002-tip1.png)\n\n2.  By multiplying the column array with the array {C2:E11} you get a new array of 10 rows and three columns. The cells in the rows which are multiplied with FALSE get all the value zero. The cells which are multiplied with TRUE keep their original values:\n\n![](images/arrays/matr002-tip2.png)\n\n3.  Calculating the sum of all these values gives you the total number of failures for the district North.\n\n</div>\n\n\n:::\n\n::: {#exr-matr003}\n**Random integers (matr003)**\n\nWith function RANDARRAY you can generate random numbers. To experiment with this and study the behavior of the dynamic array formulas, create a new file with the following data:\n\n![](images/arrays/matr003-data.png)\n\n1.  In cell B7, enter the formula to generate random integers, referring to cells in B1 through B4 for the first four arguments.\n2.  Enter a formula in cell B6 to calculate the average of the generated numbers. Use a reference to the spill range.\n3.  Experiment with different values in cells B1 through B4. Note that the maximum value cannot be less than the minimum value.\n:::\n\n::: {#exr-matr004}\n**Random dates and times (matr004)**\n\nDates and times are stored internally in Excel as a number. For example, `2020-06-30 18:00:00` will be stored internally as `44012.75`.The part before the comma is the date and the part after the comma is the time.Since you can generate random numbers with the RANDARRAY function, you can also generate dates and times with it. The figure below shows an example.\n\n![](images/arrays/matr004-data.png)\n\n1.  In a new worksheet, enter the data for the first three rows and apply correct formatting.\n2.  Enter a formula in cell B5 to generate the dates and in cell E5 a formula to generate the times. Use the data in the first three rows as arguments. In the spill range you have to apply the correct formatting for dates or times because that does not happen automatically.\n3.  Experiment with different values in the first three rows. Note that the maximum value cannot be less than the minimum value.\n:::\n\n::: {#exr-matr005}\n**Sorting columns (matr005)**\n\nThe figure below shows the population size of the Benelux countries for the years 2000, 2005, 2010 and 2015. If you want this data for the years in reverse order, you can easily do this with the dynamic array formula SORT, which also allows you to sort columns.\n\n![](images/arrays/matr005-data.png)\n\n[File]{.smallcaps}: `Benelux-Population.xlsx`\n\nOpen the file and copy the data in columns A and B respectively to H and I. Now enter the formula SORT in cell J1 so that the data for the years appears in descending order. The result should look like this.\n\n![](images/arrays/matr005-solution.png)\n\nIf you want to keep the file, save it under the name matr005.xlsx, then the original file is not changed.\n:::\n\n::: {#exr-matr006}\n**Sequence of Roman numbers (matr006)**\n\nIn a new worksheet, create an array with the numbers 1 to 100 as in the following figure.\n\n![](images/arrays/matr006-data.png)\n\nThen change the formula so that you get Roman numbers.\n\n\n<div class='webex-solution'><button>Hint</button>\n\nFunction `ROMAN` converts Arabic numbers to Roman numbers, as text.\n\n</div>\n\n\n![](images/arrays/matr006-data-r.png)\n\nIf you want to keep the file, save it under the name `matr006.xlsx`.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}